1. c = getchar() != EOF

The EOF character is received when there is no more input. The name makes more sense in the case where the input is being read from a real file, rather than user input (which is a special case of a file).


2. Why must the variable used to hold getchar's return value be type int?

a char in a file may be any possible char value, including the null character that C-strings use for termination, getchar() must use a larger integer type to add an EOF-value.

It simply happens to use int for that purpose, but it could use any type with at least 9 bit.


3. What is the difference between the prefix and postfix forms of the ++ operator?

In the prefix version (i.e., ++i), the value of i is incremented, and the value of the expression is the new value of i.

In the postfix version (i.e., i++), the value of i is incremented, but the value of the expression is the original value of i.


4. i = i++

it's the same with...

int tmp = i;
i++;
i = tmp;


5. What is the definition of a string in C?

char*


6. What will the getline function from section 6.3 of the notes do if successive calls to getchar return the four values 'a', 'b', 'c', and EOF? Is getline's behavior reasonable?

Is it possible for this situation to occur, that is, for a ``line'' somehow not to be terminated by \n?



